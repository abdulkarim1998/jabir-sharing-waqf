// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: organizations.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const CreateOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (
    name, location, twitter, instagram, website, description, 
    email, phone, logo
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, name, location, is_active, twitter, instagram, website, description, email, phone, logo, created_date, modified_date
`

type CreateOrganizationParams struct {
	Name        string  `json:"name"`
	Location    *string `json:"location"`
	Twitter     *string `json:"twitter"`
	Instagram   *string `json:"instagram"`
	Website     *string `json:"website"`
	Description *string `json:"description"`
	Email       string  `json:"email"`
	Phone       *string `json:"phone"`
	Logo        *string `json:"logo"`
}

func (q *Queries) CreateOrganization(ctx context.Context, arg *CreateOrganizationParams) (*Organization, error) {
	row := q.db.QueryRow(ctx, CreateOrganization,
		arg.Name,
		arg.Location,
		arg.Twitter,
		arg.Instagram,
		arg.Website,
		arg.Description,
		arg.Email,
		arg.Phone,
		arg.Logo,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.IsActive,
		&i.Twitter,
		&i.Instagram,
		&i.Website,
		&i.Description,
		&i.Email,
		&i.Phone,
		&i.Logo,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}

const DeleteOrganization = `-- name: DeleteOrganization :exec
UPDATE organizations SET 
    is_active = false,
    modified_date = NOW()
WHERE id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteOrganization, id)
	return err
}

const GetOrganizationByID = `-- name: GetOrganizationByID :one
SELECT id, name, location, is_active, twitter, instagram, website, description, email, phone, logo, created_date, modified_date FROM organizations WHERE id = $1 AND is_active = true LIMIT 1
`

func (q *Queries) GetOrganizationByID(ctx context.Context, id uuid.UUID) (*Organization, error) {
	row := q.db.QueryRow(ctx, GetOrganizationByID, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.IsActive,
		&i.Twitter,
		&i.Instagram,
		&i.Website,
		&i.Description,
		&i.Email,
		&i.Phone,
		&i.Logo,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}

const ListOrganizations = `-- name: ListOrganizations :many
SELECT id, name, location, is_active, twitter, instagram, website, description, email, phone, logo, created_date, modified_date FROM organizations WHERE is_active = true ORDER BY name
`

func (q *Queries) ListOrganizations(ctx context.Context) ([]*Organization, error) {
	rows, err := q.db.Query(ctx, ListOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Organization{}
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.IsActive,
			&i.Twitter,
			&i.Instagram,
			&i.Website,
			&i.Description,
			&i.Email,
			&i.Phone,
			&i.Logo,
			&i.CreatedDate,
			&i.ModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateOrganization = `-- name: UpdateOrganization :one
UPDATE organizations SET
    name = $2,
    location = $3,
    twitter = $4,
    instagram = $5,
    website = $6,
    description = $7,
    email = $8,
    phone = $9,
    logo = $10,
    modified_date = NOW()
WHERE id = $1 AND is_active = true
RETURNING id, name, location, is_active, twitter, instagram, website, description, email, phone, logo, created_date, modified_date
`

type UpdateOrganizationParams struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Location    *string   `json:"location"`
	Twitter     *string   `json:"twitter"`
	Instagram   *string   `json:"instagram"`
	Website     *string   `json:"website"`
	Description *string   `json:"description"`
	Email       string    `json:"email"`
	Phone       *string   `json:"phone"`
	Logo        *string   `json:"logo"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg *UpdateOrganizationParams) (*Organization, error) {
	row := q.db.QueryRow(ctx, UpdateOrganization,
		arg.ID,
		arg.Name,
		arg.Location,
		arg.Twitter,
		arg.Instagram,
		arg.Website,
		arg.Description,
		arg.Email,
		arg.Phone,
		arg.Logo,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.IsActive,
		&i.Twitter,
		&i.Instagram,
		&i.Website,
		&i.Description,
		&i.Email,
		&i.Phone,
		&i.Logo,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}
