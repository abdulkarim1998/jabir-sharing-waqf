// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: waqfs.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateWaqf = `-- name: CreateWaqf :one
INSERT INTO waqfs (
    waqf_type_id, project_id, number_of_saham
) VALUES (
    $1, $2, $3
) RETURNING id, waqf_type_id, project_id, number_of_saham, total_amount, created_date, modified_date
`

type CreateWaqfParams struct {
	WaqfTypeID    pgtype.UUID `json:"waqf_type_id"`
	ProjectID     pgtype.UUID `json:"project_id"`
	NumberOfSaham int32       `json:"number_of_saham"`
}

func (q *Queries) CreateWaqf(ctx context.Context, arg *CreateWaqfParams) (*Waqf, error) {
	row := q.db.QueryRow(ctx, CreateWaqf, arg.WaqfTypeID, arg.ProjectID, arg.NumberOfSaham)
	var i Waqf
	err := row.Scan(
		&i.ID,
		&i.WaqfTypeID,
		&i.ProjectID,
		&i.NumberOfSaham,
		&i.TotalAmount,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}

const GetWaqfByID = `-- name: GetWaqfByID :one
SELECT id, waqf_type_id, project_id, number_of_saham, total_amount, created_date, modified_date FROM waqfs WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWaqfByID(ctx context.Context, id uuid.UUID) (*Waqf, error) {
	row := q.db.QueryRow(ctx, GetWaqfByID, id)
	var i Waqf
	err := row.Scan(
		&i.ID,
		&i.WaqfTypeID,
		&i.ProjectID,
		&i.NumberOfSaham,
		&i.TotalAmount,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}

const GetWaqfsByProjectID = `-- name: GetWaqfsByProjectID :many
SELECT 
    w.id, w.waqf_type_id, w.project_id, w.number_of_saham, w.total_amount, w.created_date, w.modified_date,
    wt.name as waqf_type_name,
    wt.fixed_amount
FROM waqfs w
JOIN waqf_types wt ON w.waqf_type_id = wt.id
WHERE w.project_id = $1
ORDER BY w.created_date DESC
`

type GetWaqfsByProjectIDRow struct {
	ID            uuid.UUID      `json:"id"`
	WaqfTypeID    pgtype.UUID    `json:"waqf_type_id"`
	ProjectID     pgtype.UUID    `json:"project_id"`
	NumberOfSaham int32          `json:"number_of_saham"`
	TotalAmount   pgtype.Numeric `json:"total_amount"`
	CreatedDate   time.Time      `json:"created_date"`
	ModifiedDate  time.Time      `json:"modified_date"`
	WaqfTypeName  string         `json:"waqf_type_name"`
	FixedAmount   pgtype.Numeric `json:"fixed_amount"`
}

func (q *Queries) GetWaqfsByProjectID(ctx context.Context, projectID pgtype.UUID) ([]*GetWaqfsByProjectIDRow, error) {
	rows, err := q.db.Query(ctx, GetWaqfsByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetWaqfsByProjectIDRow{}
	for rows.Next() {
		var i GetWaqfsByProjectIDRow
		if err := rows.Scan(
			&i.ID,
			&i.WaqfTypeID,
			&i.ProjectID,
			&i.NumberOfSaham,
			&i.TotalAmount,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.WaqfTypeName,
			&i.FixedAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListWaqfs = `-- name: ListWaqfs :many
SELECT 
    w.id, w.waqf_type_id, w.project_id, w.number_of_saham, w.total_amount, w.created_date, w.modified_date,
    wt.name as waqf_type_name,
    wt.fixed_amount,
    p.title as project_title
FROM waqfs w
JOIN waqf_types wt ON w.waqf_type_id = wt.id
JOIN projects p ON w.project_id = p.id
ORDER BY w.created_date DESC
`

type ListWaqfsRow struct {
	ID            uuid.UUID      `json:"id"`
	WaqfTypeID    pgtype.UUID    `json:"waqf_type_id"`
	ProjectID     pgtype.UUID    `json:"project_id"`
	NumberOfSaham int32          `json:"number_of_saham"`
	TotalAmount   pgtype.Numeric `json:"total_amount"`
	CreatedDate   time.Time      `json:"created_date"`
	ModifiedDate  time.Time      `json:"modified_date"`
	WaqfTypeName  string         `json:"waqf_type_name"`
	FixedAmount   pgtype.Numeric `json:"fixed_amount"`
	ProjectTitle  string         `json:"project_title"`
}

func (q *Queries) ListWaqfs(ctx context.Context) ([]*ListWaqfsRow, error) {
	rows, err := q.db.Query(ctx, ListWaqfs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListWaqfsRow{}
	for rows.Next() {
		var i ListWaqfsRow
		if err := rows.Scan(
			&i.ID,
			&i.WaqfTypeID,
			&i.ProjectID,
			&i.NumberOfSaham,
			&i.TotalAmount,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.WaqfTypeName,
			&i.FixedAmount,
			&i.ProjectTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
