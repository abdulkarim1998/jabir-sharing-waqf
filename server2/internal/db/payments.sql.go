// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreatePaymentConfiguration = `-- name: CreatePaymentConfiguration :one
INSERT INTO payment_configurations (
    organization_id, merchant_id, terminal_id, gateway_url
) VALUES (
    $1, $2, $3, $4
) RETURNING id, organization_id, merchant_id, terminal_id, gateway_url, is_active, created_date, modified_date
`

type CreatePaymentConfigurationParams struct {
	OrganizationID pgtype.UUID `json:"organization_id"`
	MerchantID     *string     `json:"merchant_id"`
	TerminalID     *string     `json:"terminal_id"`
	GatewayUrl     *string     `json:"gateway_url"`
}

func (q *Queries) CreatePaymentConfiguration(ctx context.Context, arg *CreatePaymentConfigurationParams) (*PaymentConfiguration, error) {
	row := q.db.QueryRow(ctx, CreatePaymentConfiguration,
		arg.OrganizationID,
		arg.MerchantID,
		arg.TerminalID,
		arg.GatewayUrl,
	)
	var i PaymentConfiguration
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.MerchantID,
		&i.TerminalID,
		&i.GatewayUrl,
		&i.IsActive,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}

const CreatePaymentTrack = `-- name: CreatePaymentTrack :one
INSERT INTO payment_tracks (
    waqf_id, ref, track_id, amount, status_id
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, waqf_id, ref, track_id, tran_id, amount, result, error_text, order_id, status_id, created_date, modified_date
`

type CreatePaymentTrackParams struct {
	WaqfID   pgtype.UUID    `json:"waqf_id"`
	Ref      string         `json:"ref"`
	TrackID  string         `json:"track_id"`
	Amount   pgtype.Numeric `json:"amount"`
	StatusID PaymentStatus  `json:"status_id"`
}

func (q *Queries) CreatePaymentTrack(ctx context.Context, arg *CreatePaymentTrackParams) (*PaymentTrack, error) {
	row := q.db.QueryRow(ctx, CreatePaymentTrack,
		arg.WaqfID,
		arg.Ref,
		arg.TrackID,
		arg.Amount,
		arg.StatusID,
	)
	var i PaymentTrack
	err := row.Scan(
		&i.ID,
		&i.WaqfID,
		&i.Ref,
		&i.TrackID,
		&i.TranID,
		&i.Amount,
		&i.Result,
		&i.ErrorText,
		&i.OrderID,
		&i.StatusID,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}

const GetPaymentConfigurationByOrganizationID = `-- name: GetPaymentConfigurationByOrganizationID :one
SELECT id, organization_id, merchant_id, terminal_id, gateway_url, is_active, created_date, modified_date FROM payment_configurations 
WHERE organization_id = $1 AND is_active = true 
LIMIT 1
`

func (q *Queries) GetPaymentConfigurationByOrganizationID(ctx context.Context, organizationID pgtype.UUID) (*PaymentConfiguration, error) {
	row := q.db.QueryRow(ctx, GetPaymentConfigurationByOrganizationID, organizationID)
	var i PaymentConfiguration
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.MerchantID,
		&i.TerminalID,
		&i.GatewayUrl,
		&i.IsActive,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}

const GetPaymentTrackByID = `-- name: GetPaymentTrackByID :one
SELECT id, waqf_id, ref, track_id, tran_id, amount, result, error_text, order_id, status_id, created_date, modified_date FROM payment_tracks WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPaymentTrackByID(ctx context.Context, id uuid.UUID) (*PaymentTrack, error) {
	row := q.db.QueryRow(ctx, GetPaymentTrackByID, id)
	var i PaymentTrack
	err := row.Scan(
		&i.ID,
		&i.WaqfID,
		&i.Ref,
		&i.TrackID,
		&i.TranID,
		&i.Amount,
		&i.Result,
		&i.ErrorText,
		&i.OrderID,
		&i.StatusID,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}

const GetPaymentTrackByTrackID = `-- name: GetPaymentTrackByTrackID :one
SELECT id, waqf_id, ref, track_id, tran_id, amount, result, error_text, order_id, status_id, created_date, modified_date FROM payment_tracks WHERE track_id = $1 LIMIT 1
`

func (q *Queries) GetPaymentTrackByTrackID(ctx context.Context, trackID string) (*PaymentTrack, error) {
	row := q.db.QueryRow(ctx, GetPaymentTrackByTrackID, trackID)
	var i PaymentTrack
	err := row.Scan(
		&i.ID,
		&i.WaqfID,
		&i.Ref,
		&i.TrackID,
		&i.TranID,
		&i.Amount,
		&i.Result,
		&i.ErrorText,
		&i.OrderID,
		&i.StatusID,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}

const GetPaymentsByWaqfID = `-- name: GetPaymentsByWaqfID :many
SELECT id, waqf_id, ref, track_id, tran_id, amount, result, error_text, order_id, status_id, created_date, modified_date FROM payment_tracks 
WHERE waqf_id = $1 
ORDER BY created_date DESC
`

func (q *Queries) GetPaymentsByWaqfID(ctx context.Context, waqfID pgtype.UUID) ([]*PaymentTrack, error) {
	rows, err := q.db.Query(ctx, GetPaymentsByWaqfID, waqfID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*PaymentTrack{}
	for rows.Next() {
		var i PaymentTrack
		if err := rows.Scan(
			&i.ID,
			&i.WaqfID,
			&i.Ref,
			&i.TrackID,
			&i.TranID,
			&i.Amount,
			&i.Result,
			&i.ErrorText,
			&i.OrderID,
			&i.StatusID,
			&i.CreatedDate,
			&i.ModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPaymentTracks = `-- name: ListPaymentTracks :many
SELECT 
    pt.id, pt.waqf_id, pt.ref, pt.track_id, pt.tran_id, pt.amount, pt.result, pt.error_text, pt.order_id, pt.status_id, pt.created_date, pt.modified_date,
    w.number_of_saham,
    w.total_amount as waqf_amount
FROM payment_tracks pt
JOIN waqfs w ON pt.waqf_id = w.id
ORDER BY pt.created_date DESC
`

type ListPaymentTracksRow struct {
	ID            uuid.UUID      `json:"id"`
	WaqfID        pgtype.UUID    `json:"waqf_id"`
	Ref           string         `json:"ref"`
	TrackID       string         `json:"track_id"`
	TranID        *string        `json:"tran_id"`
	Amount        pgtype.Numeric `json:"amount"`
	Result        *string        `json:"result"`
	ErrorText     *string        `json:"error_text"`
	OrderID       *int32         `json:"order_id"`
	StatusID      PaymentStatus  `json:"status_id"`
	CreatedDate   time.Time      `json:"created_date"`
	ModifiedDate  time.Time      `json:"modified_date"`
	NumberOfSaham int32          `json:"number_of_saham"`
	WaqfAmount    pgtype.Numeric `json:"waqf_amount"`
}

func (q *Queries) ListPaymentTracks(ctx context.Context) ([]*ListPaymentTracksRow, error) {
	rows, err := q.db.Query(ctx, ListPaymentTracks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListPaymentTracksRow{}
	for rows.Next() {
		var i ListPaymentTracksRow
		if err := rows.Scan(
			&i.ID,
			&i.WaqfID,
			&i.Ref,
			&i.TrackID,
			&i.TranID,
			&i.Amount,
			&i.Result,
			&i.ErrorText,
			&i.OrderID,
			&i.StatusID,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.NumberOfSaham,
			&i.WaqfAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePaymentConfiguration = `-- name: UpdatePaymentConfiguration :one
UPDATE payment_configurations SET
    merchant_id = $2,
    terminal_id = $3,
    gateway_url = $4,
    modified_date = NOW()
WHERE organization_id = $1 AND is_active = true
RETURNING id, organization_id, merchant_id, terminal_id, gateway_url, is_active, created_date, modified_date
`

type UpdatePaymentConfigurationParams struct {
	OrganizationID pgtype.UUID `json:"organization_id"`
	MerchantID     *string     `json:"merchant_id"`
	TerminalID     *string     `json:"terminal_id"`
	GatewayUrl     *string     `json:"gateway_url"`
}

func (q *Queries) UpdatePaymentConfiguration(ctx context.Context, arg *UpdatePaymentConfigurationParams) (*PaymentConfiguration, error) {
	row := q.db.QueryRow(ctx, UpdatePaymentConfiguration,
		arg.OrganizationID,
		arg.MerchantID,
		arg.TerminalID,
		arg.GatewayUrl,
	)
	var i PaymentConfiguration
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.MerchantID,
		&i.TerminalID,
		&i.GatewayUrl,
		&i.IsActive,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}

const UpdatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE payment_tracks SET
    tran_id = $2,
    result = $3,
    error_text = $4,
    order_id = $5,
    status_id = $6,
    modified_date = NOW()
WHERE track_id = $1
RETURNING id, waqf_id, ref, track_id, tran_id, amount, result, error_text, order_id, status_id, created_date, modified_date
`

type UpdatePaymentStatusParams struct {
	TrackID   string        `json:"track_id"`
	TranID    *string       `json:"tran_id"`
	Result    *string       `json:"result"`
	ErrorText *string       `json:"error_text"`
	OrderID   *int32        `json:"order_id"`
	StatusID  PaymentStatus `json:"status_id"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg *UpdatePaymentStatusParams) (*PaymentTrack, error) {
	row := q.db.QueryRow(ctx, UpdatePaymentStatus,
		arg.TrackID,
		arg.TranID,
		arg.Result,
		arg.ErrorText,
		arg.OrderID,
		arg.StatusID,
	)
	var i PaymentTrack
	err := row.Scan(
		&i.ID,
		&i.WaqfID,
		&i.Ref,
		&i.TrackID,
		&i.TranID,
		&i.Amount,
		&i.Result,
		&i.ErrorText,
		&i.OrderID,
		&i.StatusID,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}
