// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: waqf_types.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateWaqfType = `-- name: CreateWaqfType :one
INSERT INTO waqf_types (
    name, description, fixed_amount
) VALUES (
    $1, $2, $3
) RETURNING id, name, description, fixed_amount, is_active, created_date, modified_date
`

type CreateWaqfTypeParams struct {
	Name        string         `json:"name"`
	Description *string        `json:"description"`
	FixedAmount pgtype.Numeric `json:"fixed_amount"`
}

func (q *Queries) CreateWaqfType(ctx context.Context, arg *CreateWaqfTypeParams) (*WaqfType, error) {
	row := q.db.QueryRow(ctx, CreateWaqfType, arg.Name, arg.Description, arg.FixedAmount)
	var i WaqfType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.FixedAmount,
		&i.IsActive,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}

const DeleteWaqfType = `-- name: DeleteWaqfType :exec
UPDATE waqf_types SET 
    is_active = false,
    modified_date = NOW()
WHERE id = $1
`

func (q *Queries) DeleteWaqfType(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteWaqfType, id)
	return err
}

const GetWaqfTypeByID = `-- name: GetWaqfTypeByID :one
SELECT id, name, description, fixed_amount, is_active, created_date, modified_date FROM waqf_types WHERE id = $1 AND is_active = true LIMIT 1
`

func (q *Queries) GetWaqfTypeByID(ctx context.Context, id uuid.UUID) (*WaqfType, error) {
	row := q.db.QueryRow(ctx, GetWaqfTypeByID, id)
	var i WaqfType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.FixedAmount,
		&i.IsActive,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}

const ListWaqfTypes = `-- name: ListWaqfTypes :many
SELECT id, name, description, fixed_amount, is_active, created_date, modified_date FROM waqf_types WHERE is_active = true ORDER BY name
`

func (q *Queries) ListWaqfTypes(ctx context.Context) ([]*WaqfType, error) {
	rows, err := q.db.Query(ctx, ListWaqfTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*WaqfType{}
	for rows.Next() {
		var i WaqfType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.FixedAmount,
			&i.IsActive,
			&i.CreatedDate,
			&i.ModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateWaqfType = `-- name: UpdateWaqfType :one
UPDATE waqf_types SET
    name = $2,
    description = $3,
    fixed_amount = $4,
    modified_date = NOW()
WHERE id = $1 AND is_active = true
RETURNING id, name, description, fixed_amount, is_active, created_date, modified_date
`

type UpdateWaqfTypeParams struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description *string        `json:"description"`
	FixedAmount pgtype.Numeric `json:"fixed_amount"`
}

func (q *Queries) UpdateWaqfType(ctx context.Context, arg *UpdateWaqfTypeParams) (*WaqfType, error) {
	row := q.db.QueryRow(ctx, UpdateWaqfType,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.FixedAmount,
	)
	var i WaqfType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.FixedAmount,
		&i.IsActive,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}
