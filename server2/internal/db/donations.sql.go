// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: donations.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const CreateDonation = `-- name: CreateDonation :one
INSERT INTO donations (
    project_id, donor_name, donor_email, donor_phone, amount, 
    donation_type, message, recipient_name, recipient_email, 
    recipient_phone, is_anonymous, payment_status, payment_reference
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
) RETURNING id, project_id, donor_name, donor_email, donor_phone, amount, donation_type, message, recipient_name, recipient_email, recipient_phone, is_anonymous, payment_status, payment_reference, payment_transaction_id, created_date, modified_date
`

type CreateDonationParams struct {
	ProjectID        pgtype.UUID       `json:"project_id"`
	DonorName        string            `json:"donor_name"`
	DonorEmail       *string           `json:"donor_email"`
	DonorPhone       *string           `json:"donor_phone"`
	Amount           pgtype.Numeric    `json:"amount"`
	DonationType     *string           `json:"donation_type"`
	Message          *string           `json:"message"`
	RecipientName    *string           `json:"recipient_name"`
	RecipientEmail   *string           `json:"recipient_email"`
	RecipientPhone   *string           `json:"recipient_phone"`
	IsAnonymous      *bool             `json:"is_anonymous"`
	PaymentStatus    NullPaymentStatus `json:"payment_status"`
	PaymentReference *string           `json:"payment_reference"`
}

func (q *Queries) CreateDonation(ctx context.Context, arg *CreateDonationParams) (*Donation, error) {
	row := q.db.QueryRow(ctx, CreateDonation,
		arg.ProjectID,
		arg.DonorName,
		arg.DonorEmail,
		arg.DonorPhone,
		arg.Amount,
		arg.DonationType,
		arg.Message,
		arg.RecipientName,
		arg.RecipientEmail,
		arg.RecipientPhone,
		arg.IsAnonymous,
		arg.PaymentStatus,
		arg.PaymentReference,
	)
	var i Donation
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DonorName,
		&i.DonorEmail,
		&i.DonorPhone,
		&i.Amount,
		&i.DonationType,
		&i.Message,
		&i.RecipientName,
		&i.RecipientEmail,
		&i.RecipientPhone,
		&i.IsAnonymous,
		&i.PaymentStatus,
		&i.PaymentReference,
		&i.PaymentTransactionID,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}

const GetDonationByID = `-- name: GetDonationByID :one
SELECT id, project_id, donor_name, donor_email, donor_phone, amount, donation_type, message, recipient_name, recipient_email, recipient_phone, is_anonymous, payment_status, payment_reference, payment_transaction_id, created_date, modified_date FROM donations WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDonationByID(ctx context.Context, id uuid.UUID) (*Donation, error) {
	row := q.db.QueryRow(ctx, GetDonationByID, id)
	var i Donation
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DonorName,
		&i.DonorEmail,
		&i.DonorPhone,
		&i.Amount,
		&i.DonationType,
		&i.Message,
		&i.RecipientName,
		&i.RecipientEmail,
		&i.RecipientPhone,
		&i.IsAnonymous,
		&i.PaymentStatus,
		&i.PaymentReference,
		&i.PaymentTransactionID,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}

const GetDonationsByOrganizationID = `-- name: GetDonationsByOrganizationID :many
SELECT d.id, d.project_id, d.donor_name, d.donor_email, d.donor_phone, d.amount, d.donation_type, d.message, d.recipient_name, d.recipient_email, d.recipient_phone, d.is_anonymous, d.payment_status, d.payment_reference, d.payment_transaction_id, d.created_date, d.modified_date FROM donations d
JOIN projects p ON d.project_id = p.id
WHERE p.organization_id = $1
ORDER BY d.created_date DESC
`

func (q *Queries) GetDonationsByOrganizationID(ctx context.Context, organizationID pgtype.UUID) ([]*Donation, error) {
	rows, err := q.db.Query(ctx, GetDonationsByOrganizationID, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Donation{}
	for rows.Next() {
		var i Donation
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DonorName,
			&i.DonorEmail,
			&i.DonorPhone,
			&i.Amount,
			&i.DonationType,
			&i.Message,
			&i.RecipientName,
			&i.RecipientEmail,
			&i.RecipientPhone,
			&i.IsAnonymous,
			&i.PaymentStatus,
			&i.PaymentReference,
			&i.PaymentTransactionID,
			&i.CreatedDate,
			&i.ModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetDonationsByProjectID = `-- name: GetDonationsByProjectID :many
SELECT id, project_id, donor_name, donor_email, donor_phone, amount, donation_type, message, recipient_name, recipient_email, recipient_phone, is_anonymous, payment_status, payment_reference, payment_transaction_id, created_date, modified_date FROM donations 
WHERE project_id = $1 
ORDER BY created_date DESC
`

func (q *Queries) GetDonationsByProjectID(ctx context.Context, projectID pgtype.UUID) ([]*Donation, error) {
	rows, err := q.db.Query(ctx, GetDonationsByProjectID, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Donation{}
	for rows.Next() {
		var i Donation
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.DonorName,
			&i.DonorEmail,
			&i.DonorPhone,
			&i.Amount,
			&i.DonationType,
			&i.Message,
			&i.RecipientName,
			&i.RecipientEmail,
			&i.RecipientPhone,
			&i.IsAnonymous,
			&i.PaymentStatus,
			&i.PaymentReference,
			&i.PaymentTransactionID,
			&i.CreatedDate,
			&i.ModifiedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetOrganizationDonationStats = `-- name: GetOrganizationDonationStats :one
SELECT 
    COUNT(d.*) as total_donations,
    COUNT(DISTINCT d.donor_email) as unique_donors,
    COALESCE(SUM(d.amount), 0) as total_amount,
    COALESCE(AVG(d.amount), 0) as average_amount
FROM donations d
JOIN projects p ON d.project_id = p.id
WHERE p.organization_id = $1 AND d.payment_status = 'Completed'
`

type GetOrganizationDonationStatsRow struct {
	TotalDonations int64       `json:"total_donations"`
	UniqueDonors   int64       `json:"unique_donors"`
	TotalAmount    interface{} `json:"total_amount"`
	AverageAmount  interface{} `json:"average_amount"`
}

func (q *Queries) GetOrganizationDonationStats(ctx context.Context, organizationID pgtype.UUID) (*GetOrganizationDonationStatsRow, error) {
	row := q.db.QueryRow(ctx, GetOrganizationDonationStats, organizationID)
	var i GetOrganizationDonationStatsRow
	err := row.Scan(
		&i.TotalDonations,
		&i.UniqueDonors,
		&i.TotalAmount,
		&i.AverageAmount,
	)
	return &i, err
}

const GetProjectDonationStats = `-- name: GetProjectDonationStats :one
SELECT 
    COUNT(*) as total_donations,
    COUNT(DISTINCT donor_email) as unique_donors,
    COALESCE(SUM(amount), 0) as total_amount,
    COALESCE(AVG(amount), 0) as average_amount
FROM donations 
WHERE project_id = $1 AND payment_status = 'Completed'
`

type GetProjectDonationStatsRow struct {
	TotalDonations int64       `json:"total_donations"`
	UniqueDonors   int64       `json:"unique_donors"`
	TotalAmount    interface{} `json:"total_amount"`
	AverageAmount  interface{} `json:"average_amount"`
}

func (q *Queries) GetProjectDonationStats(ctx context.Context, projectID pgtype.UUID) (*GetProjectDonationStatsRow, error) {
	row := q.db.QueryRow(ctx, GetProjectDonationStats, projectID)
	var i GetProjectDonationStatsRow
	err := row.Scan(
		&i.TotalDonations,
		&i.UniqueDonors,
		&i.TotalAmount,
		&i.AverageAmount,
	)
	return &i, err
}

const GetTopDonorsByOrganization = `-- name: GetTopDonorsByOrganization :many
SELECT 
    d.donor_name,
    d.donor_email,
    SUM(d.amount) as total_donated,
    COUNT(*) as donation_count
FROM donations d
JOIN projects p ON d.project_id = p.id
WHERE p.organization_id = $1 AND d.payment_status = 'Completed'
GROUP BY d.donor_name, d.donor_email
ORDER BY total_donated DESC
LIMIT $2
`

type GetTopDonorsByOrganizationParams struct {
	OrganizationID pgtype.UUID `json:"organization_id"`
	Limit          int32       `json:"limit"`
}

type GetTopDonorsByOrganizationRow struct {
	DonorName     string  `json:"donor_name"`
	DonorEmail    *string `json:"donor_email"`
	TotalDonated  int64   `json:"total_donated"`
	DonationCount int64   `json:"donation_count"`
}

func (q *Queries) GetTopDonorsByOrganization(ctx context.Context, arg *GetTopDonorsByOrganizationParams) ([]*GetTopDonorsByOrganizationRow, error) {
	rows, err := q.db.Query(ctx, GetTopDonorsByOrganization, arg.OrganizationID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetTopDonorsByOrganizationRow{}
	for rows.Next() {
		var i GetTopDonorsByOrganizationRow
		if err := rows.Scan(
			&i.DonorName,
			&i.DonorEmail,
			&i.TotalDonated,
			&i.DonationCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTopDonorsByProject = `-- name: GetTopDonorsByProject :many
SELECT 
    donor_name,
    donor_email,
    SUM(amount) as total_donated,
    COUNT(*) as donation_count
FROM donations
WHERE project_id = $1 AND payment_status = 'Completed'
GROUP BY donor_name, donor_email
ORDER BY total_donated DESC
LIMIT $2
`

type GetTopDonorsByProjectParams struct {
	ProjectID pgtype.UUID `json:"project_id"`
	Limit     int32       `json:"limit"`
}

type GetTopDonorsByProjectRow struct {
	DonorName     string  `json:"donor_name"`
	DonorEmail    *string `json:"donor_email"`
	TotalDonated  int64   `json:"total_donated"`
	DonationCount int64   `json:"donation_count"`
}

func (q *Queries) GetTopDonorsByProject(ctx context.Context, arg *GetTopDonorsByProjectParams) ([]*GetTopDonorsByProjectRow, error) {
	rows, err := q.db.Query(ctx, GetTopDonorsByProject, arg.ProjectID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetTopDonorsByProjectRow{}
	for rows.Next() {
		var i GetTopDonorsByProjectRow
		if err := rows.Scan(
			&i.DonorName,
			&i.DonorEmail,
			&i.TotalDonated,
			&i.DonationCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateDonationPaymentStatus = `-- name: UpdateDonationPaymentStatus :one
UPDATE donations SET
    payment_status = $2,
    payment_transaction_id = $3,
    modified_date = NOW()
WHERE id = $1
RETURNING id, project_id, donor_name, donor_email, donor_phone, amount, donation_type, message, recipient_name, recipient_email, recipient_phone, is_anonymous, payment_status, payment_reference, payment_transaction_id, created_date, modified_date
`

type UpdateDonationPaymentStatusParams struct {
	ID                   uuid.UUID         `json:"id"`
	PaymentStatus        NullPaymentStatus `json:"payment_status"`
	PaymentTransactionID *string           `json:"payment_transaction_id"`
}

func (q *Queries) UpdateDonationPaymentStatus(ctx context.Context, arg *UpdateDonationPaymentStatusParams) (*Donation, error) {
	row := q.db.QueryRow(ctx, UpdateDonationPaymentStatus, arg.ID, arg.PaymentStatus, arg.PaymentTransactionID)
	var i Donation
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.DonorName,
		&i.DonorEmail,
		&i.DonorPhone,
		&i.Amount,
		&i.DonationType,
		&i.Message,
		&i.RecipientName,
		&i.RecipientEmail,
		&i.RecipientPhone,
		&i.IsAnonymous,
		&i.PaymentStatus,
		&i.PaymentReference,
		&i.PaymentTransactionID,
		&i.CreatedDate,
		&i.ModifiedDate,
	)
	return &i, err
}
