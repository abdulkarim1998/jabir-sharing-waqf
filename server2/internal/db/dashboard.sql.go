// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dashboard.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const GetDashboardReportByDateRange = `-- name: GetDashboardReportByDateRange :one
SELECT 
    COUNT(w.id) as total_waqfs,
    COALESCE(SUM(w.total_amount), 0) as total_amount,
    COUNT(DISTINCT w.project_id) as total_projects
FROM waqfs w
JOIN projects p ON w.project_id = p.id
WHERE p.is_active = true 
AND w.created_date >= $1 
AND w.created_date <= $2
`

type GetDashboardReportByDateRangeParams struct {
	CreatedDate   time.Time `json:"created_date"`
	CreatedDate_2 time.Time `json:"created_date_2"`
}

type GetDashboardReportByDateRangeRow struct {
	TotalWaqfs    int64       `json:"total_waqfs"`
	TotalAmount   interface{} `json:"total_amount"`
	TotalProjects int64       `json:"total_projects"`
}

func (q *Queries) GetDashboardReportByDateRange(ctx context.Context, arg *GetDashboardReportByDateRangeParams) (*GetDashboardReportByDateRangeRow, error) {
	row := q.db.QueryRow(ctx, GetDashboardReportByDateRange, arg.CreatedDate, arg.CreatedDate_2)
	var i GetDashboardReportByDateRangeRow
	err := row.Scan(&i.TotalWaqfs, &i.TotalAmount, &i.TotalProjects)
	return &i, err
}

const GetMonthlyDonationTrend = `-- name: GetMonthlyDonationTrend :many
SELECT 
    DATE_TRUNC('month', w.created_date) as month,
    COUNT(w.id) as total_waqfs,
    COALESCE(SUM(w.total_amount), 0) as total_amount
FROM waqfs w
JOIN projects p ON w.project_id = p.id
WHERE p.is_active = true 
AND w.created_date >= $1 
AND w.created_date <= $2
GROUP BY DATE_TRUNC('month', w.created_date)
ORDER BY month
`

type GetMonthlyDonationTrendParams struct {
	CreatedDate   time.Time `json:"created_date"`
	CreatedDate_2 time.Time `json:"created_date_2"`
}

type GetMonthlyDonationTrendRow struct {
	Month       pgtype.Interval `json:"month"`
	TotalWaqfs  int64           `json:"total_waqfs"`
	TotalAmount interface{}     `json:"total_amount"`
}

func (q *Queries) GetMonthlyDonationTrend(ctx context.Context, arg *GetMonthlyDonationTrendParams) ([]*GetMonthlyDonationTrendRow, error) {
	rows, err := q.db.Query(ctx, GetMonthlyDonationTrend, arg.CreatedDate, arg.CreatedDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetMonthlyDonationTrendRow{}
	for rows.Next() {
		var i GetMonthlyDonationTrendRow
		if err := rows.Scan(&i.Month, &i.TotalWaqfs, &i.TotalAmount); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetOrganizationDashboardReport = `-- name: GetOrganizationDashboardReport :one
SELECT 
    COUNT(DISTINCT p.id) as total_projects,
    COUNT(w.id) as total_waqfs,
    COALESCE(SUM(w.total_amount), 0) as total_donations
FROM organizations o
LEFT JOIN projects p ON o.id = p.organization_id AND p.is_active = true
LEFT JOIN waqfs w ON p.id = w.project_id
WHERE o.id = $1 AND o.is_active = true
`

type GetOrganizationDashboardReportRow struct {
	TotalProjects  int64       `json:"total_projects"`
	TotalWaqfs     int64       `json:"total_waqfs"`
	TotalDonations interface{} `json:"total_donations"`
}

func (q *Queries) GetOrganizationDashboardReport(ctx context.Context, id uuid.UUID) (*GetOrganizationDashboardReportRow, error) {
	row := q.db.QueryRow(ctx, GetOrganizationDashboardReport, id)
	var i GetOrganizationDashboardReportRow
	err := row.Scan(&i.TotalProjects, &i.TotalWaqfs, &i.TotalDonations)
	return &i, err
}

const GetTotalDonationsReport = `-- name: GetTotalDonationsReport :one
SELECT 
    COUNT(w.id) as total_waqfs,
    COALESCE(SUM(w.total_amount), 0) as total_amount,
    COUNT(DISTINCT w.project_id) as total_projects
FROM waqfs w
JOIN projects p ON w.project_id = p.id
WHERE p.is_active = true
`

type GetTotalDonationsReportRow struct {
	TotalWaqfs    int64       `json:"total_waqfs"`
	TotalAmount   interface{} `json:"total_amount"`
	TotalProjects int64       `json:"total_projects"`
}

func (q *Queries) GetTotalDonationsReport(ctx context.Context) (*GetTotalDonationsReportRow, error) {
	row := q.db.QueryRow(ctx, GetTotalDonationsReport)
	var i GetTotalDonationsReportRow
	err := row.Scan(&i.TotalWaqfs, &i.TotalAmount, &i.TotalProjects)
	return &i, err
}

const GetWaqfTypeDonatedReport = `-- name: GetWaqfTypeDonatedReport :many
SELECT 
    wt.id,
    wt.name,
    COUNT(w.id) as total_waqfs,
    COALESCE(SUM(w.total_amount), 0) as total_amount
FROM waqf_types wt
LEFT JOIN waqfs w ON wt.id = w.waqf_type_id
WHERE wt.is_active = true
GROUP BY wt.id, wt.name
ORDER BY total_amount DESC
`

type GetWaqfTypeDonatedReportRow struct {
	ID          uuid.UUID   `json:"id"`
	Name        string      `json:"name"`
	TotalWaqfs  int64       `json:"total_waqfs"`
	TotalAmount interface{} `json:"total_amount"`
}

func (q *Queries) GetWaqfTypeDonatedReport(ctx context.Context) ([]*GetWaqfTypeDonatedReportRow, error) {
	rows, err := q.db.Query(ctx, GetWaqfTypeDonatedReport)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetWaqfTypeDonatedReportRow{}
	for rows.Next() {
		var i GetWaqfTypeDonatedReportRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.TotalWaqfs,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
